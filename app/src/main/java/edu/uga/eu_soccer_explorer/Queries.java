package edu.uga.eu_soccer_explorer;



public final class Queries {

    final static String COUNTRIES_LEAGUES_TEAMS_ALL = "SELECT C.id as country_id, C.name as country_name, L.id as league_id, L.name as league_name, T.Id as team_id, team_long_name as team_name, team_short_name FROM Country as C, League as L, Team as T WHERE C.id IN (SELECT country_id FROM League WHERE Id = L.id) AND T.team_api_id IN (SELECT home_team_api_id FROM `Match` WHERE league_id = L.id)";

    final static String PLAYERS_BY_NAME = "SELECT player.player_api_id, player_name, player.player_fifa_api_id, birthday, height, AVG(weight) as weight, attacking_work_rate, defensive_work_rate, AVG(overall_rating) as overall_rating, AVG(potential) as potential, AVG(crossing) as crossing, AVG(finishing) as finishing, AVG(heading_accuracy) as heading_accuracy, AVG(short_passing) as short_passing, AVG(volleys) as volleys, AVG(dribbling) as dribbling, AVG(curve) as curve, AVG(free_kick_accuracy) as free_kick_accuracy, AVG(long_passing) as long_passing, AVG(ball_control) as ball_control, AVG(acceleration) as acceleration, AVG(sprint_speed) as sprint_speed, AVG(agility) as agility, AVG(reactions) as reactions, AVG(balance) as balance, AVG(shot_power) as shot_power, AVG(jumping) as jumping, avg(stamina) as stamina, AVG(aggression) as aggression, AVG(strength) as strength, AVG(long_shots) as long_shots, AVG(aggression) as aggression, AVG(interceptions) as interceptions, AVG(positioning) as positioning, AVG(vision) as vision, AVG(penalties) as penalties, AVG(marking) as marking, AVG(standing_tackle) as standing_tackle, AVG(sliding_tackle) as sliding_tackle, AVG(gk_diving) as gk_diving, AVG(gk_handling) as gk_handling, AVG(gk_kicking) as gk_kicking, AVG(gk_positioning) as gk_positioning, AVG(gk_reflexes) as gk_reflexes FROM player, player_attributes WHERE player.player_name LIKE '%{0}%' AND player.player_api_id = player_attributes.player_api_id GROUP BY player.player_name";

    final static String TEAMS_BY_NAME = "SELECT * FROM team, team_attributes WHERE team.team_long_name LIKE '%{0}%' AND team.team_api_id = team_attributes.team_api_id"; 

    final static String PREDICTION_QUERY = "SELECT CASE WHEN (Team_1_Win_Percent = Team_2_Win_Percent OR Team_1_AVG_Goals = Team_2_AVG_Goals) THEN \"Predicted Outcome: Draw\" 	WHEN (Team_1_Win_Percent > Team_2_Win_Percent AND Team_1_AVG_Goals > Team_2_AVG_Goals) THEN \"Team 1 victory\"	 	WHEN (Team_2_Win_Percent > Team_1_Win_Percent AND Team_2_AVG_Goals > Team_1_AVG_Goals) THEN \"Team 2 victory\"     WHEN (Team_1_Win_Percent > Team_2_Win_Percent) THEN \"Team 1 victory\" 	WHEN (Team_1_Win_Percent < Team_2_Win_Percent) THEN \"Team 2 victory\"     WHEN (Team_1_AVG_Goals > Team_2_AVG_Goals) THEN \"Team 1 victory\"     WHEN (Team_1_AVG_Goals < Team_2_AVG_Goals) THEN \"Team 2 victory\"	     ELSE \"Predicted Outcome: Draw\"     END AS Predicted_Outcome FROM (SELECT ((T1_away.T1_away_wins + T1_home.T1_home_wins)/(T1_away.T1_away_total + T1_home.T1_home_total)*100) AS Team_1_Win_Percent, ((T1_away.T1_away_goals + T1_home.T1_home_goals)/(T1_away.T1_away_total + T1_home.T1_home_total)) AS Team_1_AVG_Goals, ((T2_away.T2_away_wins + T2_home.T2_home_wins)/(T2_away.T2_away_total + T2_home.T2_home_total)*100) AS Team_2_Win_Percent, ((T2_away.T2_away_goals + T2_home.T2_home_goals)/(T2_away.T2_away_total + T2_home.T2_home_total)) AS Team_2_AVG_Goals FROM  (SELECT COUNT(*) AS T1_away_wins, numGames.count AS T1_away_total, SUM(away_team_goal) AS T1_away_goals  FROM (SELECT * FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{0}') AS team1id 	 WHERE matches.away_team_api_id = team1id.team_api_id) AS T1_away_games, (SELECT COUNT(*) AS count FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{0}') AS team1id 	 WHERE matches.away_team_api_id = team1id.team_api_id) AS numGames      WHERE away_team_goal > home_team_goal      GROUP BY away_team_api_id) AS T1_away,      (SELECT COUNT(*) AS T1_home_wins, numGames.count AS T1_home_total, SUM(home_team_goal) AS T1_home_goals FROM (SELECT * FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{0}') AS team1id 	 WHERE matches.home_team_api_id = team1id.team_api_id) AS T1_home_games, (SELECT COUNT(*) AS count FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{0}') AS team1id 	 WHERE matches.home_team_api_id = team1id.team_api_id) AS numGames      WHERE home_team_goal > away_team_goal      GROUP BY home_team_api_id) AS T1_home,      (SELECT COUNT(*) AS T2_away_wins, numGames.count AS T2_away_total, SUM(away_team_goal) AS T2_away_goals FROM (SELECT * FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{1}') AS team2id 	 WHERE matches.away_team_api_id = team2id.team_api_id) AS T2_away_games, (SELECT COUNT(*) AS count FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{1}') AS team2id 	 WHERE matches.away_team_api_id = team2id.team_api_id) AS numGames      WHERE away_team_goal > home_team_goal      GROUP BY away_team_api_id) AS T2_away, (SELECT COUNT(*) AS T2_home_wins, numGames.count AS T2_home_total, SUM(home_team_goal) AS T2_home_goals FROM (SELECT * FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{1}') AS team2id 	 WHERE matches.home_team_api_id = team2id.team_api_id) AS T2_home_games, (SELECT COUNT(*) AS count FROM eu_soccer.match AS matches, (SELECT team_api_id FROM team WHERE id = '{1}') AS team2id 	 WHERE matches.home_team_api_id = team2id.team_api_id) AS numGames      WHERE away_team_goal < home_team_goal      GROUP BY home_team_api_id) AS T2_home ) AS summaryStats;";
}